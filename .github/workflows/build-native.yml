name: Build Native Libraries

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'Native/libssh2/**'
      - '.github/workflows/build-native.yml'

jobs:
  build-all:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: win-x64
            dockerfile_platform: linux/amd64
            target_triple: x86_64-w64-mingw32
          - platform: win-x86
            dockerfile_platform: linux/amd64
            target_triple: i686-w64-mingw32
          - platform: linux-x64
            dockerfile_platform: linux/amd64
            target_triple: x86_64-linux-gnu
          - platform: linux-arm64
            dockerfile_platform: linux/arm64
            target_triple: aarch64-linux-gnu
          - platform: osx-x64
            dockerfile_platform: linux/amd64
            target_triple: x86_64-apple-darwin
          - platform: osx-arm64
            dockerfile_platform: linux/amd64
            target_triple: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build libssh2
        run: |
          mkdir -p output

          # Determine build configuration based on platform
          PLATFORM="${{ matrix.platform }}"
          TARGET_TRIPLE="${{ matrix.target_triple }}"

          if [[ "$PLATFORM" == win-* ]]; then
            # Windows build using MinGW
            docker buildx build \
              --platform ${{ matrix.dockerfile_platform }} \
              --build-arg TARGET_TRIPLE=$TARGET_TRIPLE \
              --output type=local,dest=./output \
              -f - . <<'EOF'
          FROM debian:bookworm-slim
          ARG TARGET_TRIPLE

          RUN apt-get update && apt-get install -y \
              build-essential \
              cmake \
              mingw-w64 \
              wget \
              && rm -rf /var/lib/apt/lists/*

          # Download and build OpenSSL for Windows
          WORKDIR /build
          RUN wget https://www.openssl.org/source/openssl-3.0.15.tar.gz && \
              tar xzf openssl-3.0.15.tar.gz && \
              cd openssl-3.0.15 && \
              ./Configure mingw64 --cross-compile-prefix=${TARGET_TRIPLE}- --prefix=/opt/openssl-${TARGET_TRIPLE} && \
              make -j$(nproc) && \
              make install_sw

          # Build libssh2
          COPY Native/libssh2 /src/libssh2
          WORKDIR /src/libssh2/build

          RUN cmake .. \
              -DCMAKE_SYSTEM_NAME=Windows \
              -DCMAKE_C_COMPILER=${TARGET_TRIPLE}-gcc \
              -DCMAKE_RC_COMPILER=${TARGET_TRIPLE}-windres \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=ON \
              -DENABLE_ZLIB_COMPRESSION=OFF \
              -DCRYPTO_BACKEND=OpenSSL \
              -DOPENSSL_ROOT_DIR=/opt/openssl-${TARGET_TRIPLE} \
              -DBUILD_EXAMPLES=OFF \
              -DBUILD_TESTING=OFF && \
              cmake --build . --config Release -j$(nproc) && \
              mkdir -p /output && \
              cp src/libssh2.dll /output/ || cp src/libssh2-*.dll /output/libssh2.dll

          FROM scratch
          COPY --from=0 /output/* /
          EOF

          elif [[ "$PLATFORM" == osx-* ]]; then
            # macOS build using osxcross
            docker buildx build \
              --platform ${{ matrix.dockerfile_platform }} \
              --build-arg TARGET_TRIPLE=$TARGET_TRIPLE \
              --output type=local,dest=./output \
              -f - . <<'EOF'
          FROM debian:bookworm-slim
          ARG TARGET_TRIPLE

          RUN apt-get update && apt-get install -y \
              build-essential \
              cmake \
              git \
              wget \
              clang \
              libssl-dev \
              libxml2-dev \
              llvm-dev \
              uuid-dev \
              && rm -rf /var/lib/apt/lists/*

          # Install osxcross
          WORKDIR /opt
          RUN git clone https://github.com/tpoechtrager/osxcross.git && \
              cd osxcross && \
              wget -nc https://github.com/joseluisq/macosx-sdks/releases/download/12.3/MacOSX12.3.sdk.tar.xz && \
              mv MacOSX12.3.sdk.tar.xz tarballs/ && \
              UNATTENDED=1 ./build.sh

          ENV PATH="/opt/osxcross/target/bin:$PATH"

          # Build libssh2
          COPY Native/libssh2 /src/libssh2
          WORKDIR /src/libssh2/build

          RUN cmake .. \
              -DCMAKE_SYSTEM_NAME=Darwin \
              -DCMAKE_C_COMPILER=${TARGET_TRIPLE}-clang \
              -DCMAKE_CXX_COMPILER=${TARGET_TRIPLE}-clang++ \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=ON \
              -DENABLE_ZLIB_COMPRESSION=ON \
              -DCRYPTO_BACKEND=OpenSSL \
              -DBUILD_EXAMPLES=OFF \
              -DBUILD_TESTING=OFF && \
              cmake --build . --config Release -j$(nproc) && \
              mkdir -p /output && \
              cp src/libssh2*.dylib /output/libssh2.dylib

          FROM scratch
          COPY --from=0 /output/* /
          EOF

          else
            # Linux build
            docker buildx build \
              --platform ${{ matrix.dockerfile_platform }} \
              --output type=local,dest=./output \
              -f - . <<'EOF'
          FROM debian:bookworm-slim

          RUN apt-get update && apt-get install -y \
              build-essential \
              cmake \
              libssl-dev \
              zlib1g-dev \
              && rm -rf /var/lib/apt/lists/*

          COPY Native/libssh2 /src/libssh2
          WORKDIR /src/libssh2/build

          RUN cmake .. \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=ON \
              -DENABLE_ZLIB_COMPRESSION=ON \
              -DCRYPTO_BACKEND=OpenSSL \
              -DBUILD_EXAMPLES=OFF \
              -DBUILD_TESTING=OFF && \
              cmake --build . --config Release -j$(nproc) && \
              mkdir -p /output && \
              cp src/libssh2.so* /output/

          FROM scratch
          COPY --from=0 /output/* /
          EOF
          fi

          # Create runtime directory structure
          mkdir -p NullOpsDevs.LibSsh/runtimes/${{ matrix.platform }}/native

          # Copy library to correct location
          if [[ "$PLATFORM" == win-* ]]; then
            cp output/libssh2.dll NullOpsDevs.LibSsh/runtimes/${{ matrix.platform }}/native/
          elif [[ "$PLATFORM" == osx-* ]]; then
            cp output/libssh2.dylib NullOpsDevs.LibSsh/runtimes/${{ matrix.platform }}/native/
          else
            # Copy and create symlink without version suffix
            cp output/libssh2.so* NullOpsDevs.LibSsh/runtimes/${{ matrix.platform }}/native/
            # Find the actual .so file and create a symlink
            cd NullOpsDevs.LibSsh/runtimes/${{ matrix.platform }}/native/
            if [ -f libssh2.so.1 ]; then
              ln -sf libssh2.so.1 libssh2.so
            fi
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libssh2-${{ matrix.platform }}
          path: NullOpsDevs.LibSsh/runtimes/${{ matrix.platform }}/native/

  package:
    needs: [build-all]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize native libraries
        run: |
          mkdir -p NullOpsDevs.LibSsh/runtimes

          # Copy all native libraries to the correct runtime folders
          for artifact in artifacts/libssh2-*; do
            platform=$(basename $artifact | sed 's/libssh2-//')
            echo "Processing $platform..."
            mkdir -p NullOpsDevs.LibSsh/runtimes/$platform/native
            cp -r $artifact/* NullOpsDevs.LibSsh/runtimes/$platform/native/ || true
          done

          # List what we have
          echo "Built native libraries:"
          find NullOpsDevs.LibSsh/runtimes -type f

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Build and Pack NuGet
        run: |
          dotnet build NullOpsDevs.LibSsh/NullOpsDevs.LibSsh.csproj -c Release
          dotnet pack NullOpsDevs.LibSsh/NullOpsDevs.LibSsh.csproj -c Release -o ./artifacts/nuget

      - name: Upload NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: artifacts/nuget/*.nupkg

      - name: Upload native libraries
        uses: actions/upload-artifact@v4
        with:
          name: native-libraries-all
          path: NullOpsDevs.LibSsh/runtimes/
